const fs = require("fs");
const a = {
  "react/display-name": 2,
  "react/jsx-key": 2,
  "react/jsx-no-comment-textnodes": 2,
  "react/jsx-no-duplicate-props": 2,
  "react/jsx-no-target-blank": 2,
  "react/jsx-no-undef": 2,
  "react/jsx-uses-react": 2,
  "react/jsx-uses-vars": 2,
  "react/no-children-prop": 2,
  "react/no-danger-with-children": 2,
  "react/no-deprecated": 2,
  "react/no-direct-mutation-state": 2,
  "react/no-find-dom-node": 2,
  "react/no-is-mounted": 2,
  "react/no-render-return-value": 2,
  "react/no-string-refs": 2,
  "react/no-unescaped-entities": 2,
  "react/no-unknown-property": 2,
  "react/no-unsafe": 0,
  "react/prop-types": 2,
  "react/react-in-jsx-scope": 2,
  "react/require-render-return": 2,
  "comma-dangle": ["error", "always-multiline"],
  "for-direction": "error",
  "getter-return": "error",
  "no-async-promise-executor": "error",
  "no-await-in-loop": "error",
  "no-compare-neg-zero": "error",
  "no-cond-assign": "error",
  "no-constant-condition": "error",
  "no-control-regex": "error",
  "no-debugger": "error",
  "no-dupe-args": "error",
  "no-dupe-else-if": "error",
  "no-dupe-keys": "error",
  "no-duplicate-case": "error",
  "no-empty-character-class": "error",
  "no-empty": [
    "error",
    {
      allowEmptyCatch: true,
    },
  ],
  "no-empty-static-block": "error",
  "no-ex-assign": "error",
  "no-extra-boolean-cast": "error",
  "no-extra-semi": "error",
  "no-func-assign": "error",
  "no-import-assign": "error",
  "no-inner-declarations": "error",
  "no-invalid-regexp": "error",
  "no-irregular-whitespace": "error",
  "no-loss-of-precision": "error",
  "no-misleading-character-class": "error",
  "no-obj-calls": "error",
  "no-promise-executor-return": "error",
  "no-prototype-builtins": "error",
  "no-regex-spaces": "error",
  "no-setter-return": "error",
  "no-sparse-arrays": "error",
  "no-template-curly-in-string": "error",
  "no-unreachable": "error",
  "no-unreachable-loop": "error",
  "no-unsafe-finally": "error",
  "no-unsafe-negation": [
    "error",
    {
      enforceForOrderingRelations: true,
    },
  ],
  "no-unsafe-optional-chaining": [
    "error",
    {
      disallowArithmeticOperators: true,
    },
  ],
  "no-useless-backreference": "error",
  "use-isnan": "error",
  "valid-typeof": [
    "error",
    {
      requireStringLiterals: false,
    },
  ],
  "no-unexpected-multiline": "error",
  "accessor-pairs": [
    "error",
    {
      enforceForClassMembers: true,
      getWithoutSet: false,
      setWithoutGet: true,
    },
  ],
  "array-callback-return": [
    "error",
    {
      allowImplicit: true,
      checkForEach: false,
    },
  ],
  "block-scoped-var": "error",
  complexity: "warn",
  curly: "error",
  "default-case": "error",
  "default-case-last": "error",
  "dot-notation": "error",
  "dot-location": ["error", "property"],
  eqeqeq: "error",
  "grouped-accessor-pairs": ["error", "getBeforeSet"],
  "guard-for-in": "error",
  "no-alert": "error",
  "no-caller": "error",
  "no-case-declarations": "error",
  "no-constructor-return": "error",
  "no-else-return": [
    "error",
    {
      allowElseIf: false,
    },
  ],
  "no-empty-pattern": "error",
  "no-eq-null": "error",
  "no-eval": "error",
  "no-extend-native": "error",
  "no-extra-bind": "error",
  "no-extra-label": "error",
  "no-fallthrough": "error",
  "no-floating-decimal": "error",
  "no-global-assign": "error",
  "no-implicit-coercion": "error",
  "no-implicit-globals": "error",
  "no-implied-eval": "error",
  "no-iterator": "error",
  "no-labels": "error",
  "no-lone-blocks": "error",
  "no-multi-spaces": "error",
  "no-multi-str": "error",
  "no-new-func": "error",
  "no-new-wrappers": "error",
  "no-nonoctal-decimal-escape": "error",
  "no-new": "error",
  "no-octal-escape": "error",
  "no-octal": "error",
  "no-proto": "error",
  "no-redeclare": "error",
  "no-return-assign": ["error", "always"],
  "no-return-await": "error",
  "no-script-url": "error",
  "no-self-assign": [
    "error",
    {
      props: true,
    },
  ],
  "no-self-compare": "error",
  "no-sequences": "error",
  "no-throw-literal": "error",
  "no-unmodified-loop-condition": "error",
  "no-unused-expressions": [
    "error",
    {
      enforceForJSX: true,
      allowShortCircuit: false,
      allowTernary: false,
      allowTaggedTemplates: false,
    },
  ],
  "no-unused-labels": "error",
  "no-useless-call": "error",
  "no-useless-catch": "error",
  "no-useless-concat": "error",
  "no-useless-escape": "error",
  "no-useless-return": "error",
  "no-void": "error",
  "no-warning-comments": "warn",
  "no-with": "error",
  "prefer-promise-reject-errors": [
    "error",
    {
      allowEmptyReject: true,
    },
  ],
  "prefer-regex-literals": [
    "error",
    {
      disallowRedundantWrapping: true,
    },
  ],
  radix: "error",
  "wrap-iife": [
    "error",
    "inside",
    {
      functionPrototypeMethods: true,
    },
  ],
  yoda: "error",
  "no-delete-var": "error",
  "no-label-var": "error",
  "no-restricted-globals": ["error", "event"],
  "no-shadow-restricted-names": "error",
  "no-undef-init": "error",
  "no-undef": [
    "error",
    {
      typeof: true,
    },
  ],
  "no-unused-vars": [
    "error",
    {
      vars: "all",
      args: "after-used",
      ignoreRestSiblings: true,
      argsIgnorePattern: "^_",
      caughtErrors: "all",
      caughtErrorsIgnorePattern: "^_$",
    },
  ],
  "no-buffer-constructor": "error",
  "no-restricted-imports": [
    "error",
    "domain",
    "freelist",
    "smalloc",
    "punycode",
    "sys",
    "querystring",
    "colors",
  ],
  "array-bracket-newline": ["error", "consistent"],
  "array-bracket-spacing": ["error", "never"],
  "array-element-newline": ["error", "consistent"],
  "brace-style": [
    "error",
    "1tbs",
    {
      allowSingleLine: false,
    },
  ],
  camelcase: [
    "error",
    {
      properties: "always",
      ignoreDestructuring: false,
      ignoreImports: false,
      ignoreGlobals: false,
    },
  ],
  "capitalized-comments": [
    "error",
    "always",
    {
      ignorePattern:
        "pragma|ignore|prettier-ignore|webpack\\w+:|c8|type-coverage:",
      ignoreInlineComments: true,
      ignoreConsecutiveComments: true,
    },
  ],
  "comma-spacing": [
    "error",
    {
      before: false,
      after: true,
    },
  ],
  "comma-style": ["error", "last"],
  "computed-property-spacing": [
    "error",
    "never",
    {
      enforceForClassMembers: true,
    },
  ],
  "eol-last": "error",
  "func-call-spacing": ["error", "never"],
  "func-name-matching": [
    "error",
    {
      considerPropertyDescriptor: true,
    },
  ],
  "func-names": ["error", "never"],
  "function-call-argument-newline": ["error", "consistent"],
  indent: [
    "error",
    "tab",
    {
      SwitchCase: 1,
      flatTernaryExpressions: false,
      offsetTernaryExpressions: false,
      ignoreComments: false,
    },
  ],
  "jsx-quotes": ["error", "prefer-single"],
  "key-spacing": [
    "error",
    {
      beforeColon: false,
      afterColon: true,
    },
  ],
  "keyword-spacing": "error",
  "linebreak-style": ["off", "unix"],
  "lines-between-class-members": [
    "error",
    "always",
    {
      exceptAfterSingleLine: true,
    },
  ],
  "max-depth": "warn",
  "max-nested-callbacks": ["warn", 4],
  "max-params": [
    "warn",
    {
      max: 4,
    },
  ],
  "max-statements-per-line": "error",
  "new-cap": [
    "error",
    {
      newIsCap: true,
      capIsNew: true,
      properties: true,
    },
  ],
  "new-parens": "error",
  "no-array-constructor": "error",
  "no-bitwise": "error",
  "no-lonely-if": "error",
  "no-mixed-operators": "error",
  "no-mixed-spaces-and-tabs": "error",
  "no-multi-assign": "error",
  "no-multiple-empty-lines": [
    "error",
    {
      max: 1,
    },
  ],
  "no-negated-condition": "error",
  "no-new-object": "error",
  "no-whitespace-before-property": "error",
  "no-trailing-spaces": "error",
  "no-unneeded-ternary": "error",
  "object-curly-spacing": ["error", "never"],
  "one-var": ["error", "never"],
  "one-var-declaration-per-line": "error",
  "operator-assignment": ["error", "always"],
  "operator-linebreak": ["error", "before"],
  "padded-blocks": [
    "error",
    "never",
    {
      allowSingleLineBlocks: false,
    },
  ],
  "padding-line-between-statements": [
    "error",
    {
      blankLine: "always",
      prev: "multiline-block-like",
      next: "*",
    },
  ],
  "prefer-exponentiation-operator": "error",
  "prefer-object-spread": "error",
  "quote-props": ["error", "as-needed"],
  quotes: ["error", "single"],
  "semi-spacing": [
    "error",
    {
      before: false,
      after: true,
    },
  ],
  "semi-style": ["error", "last"],
  semi: ["error", "always"],
  "space-before-blocks": ["error", "always"],
  "space-before-function-paren": [
    "error",
    {
      anonymous: "always",
      named: "never",
      asyncArrow: "always",
    },
  ],
  "space-in-parens": ["error", "never"],
  "space-infix-ops": "error",
  "space-unary-ops": "error",
  "spaced-comment": [
    "error",
    "always",
    {
      line: {
        exceptions: ["-", "+", "*"],
        markers: ["!", "/", "=>"],
      },
      block: {
        exceptions: ["-", "+", "*"],
        markers: ["!", "*"],
        balanced: true,
      },
    },
  ],
  "switch-colon-spacing": [
    "error",
    {
      after: true,
      before: false,
    },
  ],
  "template-tag-spacing": ["error", "never"],
  "unicode-bom": ["error", "never"],
  "arrow-body-style": "error",
  "arrow-parens": ["error", "as-needed"],
  "arrow-spacing": [
    "error",
    {
      before: true,
      after: true,
    },
  ],
  "constructor-super": "error",
  "generator-star-spacing": ["error", "both"],
  "no-class-assign": "error",
  "no-const-assign": "error",
  "no-constant-binary-expression": "error",
  "no-dupe-class-members": "error",
  "no-new-native-nonconstructor": "error",
  "no-this-before-super": "error",
  "no-useless-computed-key": [
    "error",
    {
      enforceForClassMembers: true,
    },
  ],
  "no-useless-constructor": "error",
  "no-useless-rename": "error",
  "no-var": "error",
  "object-shorthand": [
    "error",
    "always",
    {
      avoidExplicitReturnArrows: true,
    },
  ],
  "prefer-arrow-callback": [
    "error",
    {
      allowNamedFunctions: true,
      allowUnboundThis: true,
    },
  ],
  "prefer-const": [
    "error",
    {
      destructuring: "all",
      ignoreReadBeforeAssign: false,
    },
  ],
  "prefer-destructuring": [
    "error",
    {
      VariableDeclarator: {
        array: false,
        object: true,
      },
      AssignmentExpression: {
        array: false,
        object: false,
      },
    },
    {
      enforceForRenamedProperties: false,
    },
  ],
  "prefer-numeric-literals": "error",
  "prefer-rest-params": "error",
  "prefer-spread": "error",
  "require-yield": "error",
  "rest-spread-spacing": ["error", "never"],
  "symbol-description": "error",
  "template-curly-spacing": "error",
  "yield-star-spacing": ["error", "both"],
  "@typescript-eslint/adjacent-overload-signatures": "error",
  "@typescript-eslint/array-type": [
    "error",
    {
      default: "array-simple",
    },
  ],
  "@typescript-eslint/await-thenable": "error",
  "@typescript-eslint/ban-ts-comment": [
    "error",
    {
      "ts-expect-error": "allow-with-description",
      minimumDescriptionLength: 4,
    },
  ],
  "@typescript-eslint/ban-tslint-comment": "error",
  "@typescript-eslint/ban-types": [
    "error",
    {
      extendDefaults: false,
      types: {
        String: {
          message: "Use `string` instead.",
          fixWith: "string",
        },
        Number: {
          message: "Use `number` instead.",
          fixWith: "number",
        },
        Boolean: {
          message: "Use `boolean` instead.",
          fixWith: "boolean",
        },
        Symbol: {
          message: "Use `symbol` instead.",
          fixWith: "symbol",
        },
        BigInt: {
          message: "Use `bigint` instead.",
          fixWith: "bigint",
        },
        Object: {
          message:
            "The `Object` type is mostly the same as `unknown`. You probably want `Record<string, unknown>` instead. See https://github.com/typescript-eslint/typescript-eslint/pull/848",
          fixWith: "Record<string, unknown>",
        },
        "{}": {
          message:
            "The `{}` type is mostly the same as `unknown`. You probably want `Record<string, unknown>` instead.",
          fixWith: "Record<string, unknown>",
        },
        object: {
          message:
            "The `object` type is hard to use. Use `Record<string, unknown>` instead. See: https://github.com/typescript-eslint/typescript-eslint/pull/848",
          fixWith: "Record<string, unknown>",
        },
        Function: "Use a specific function type instead, like `() => void`.",
        null: {
          message:
            "Use `undefined` instead. See: https://github.com/sindresorhus/meta/issues/7",
          fixWith: "undefined",
        },
        "[]": "Don't use the empty array type `[]`. It only allows empty arrays. Use `SomeType[]` instead.",
        "[[]]":
          "Don't use `[[]]`. It only allows an array with a single element which is an empty array. Use `SomeType[][]` instead.",
        "[[[]]]": "Don't use `[[[]]]`. Use `SomeType[][][]` instead.",
        "[[[[]]]]": "ur drunk 🤡",
        "[[[[[]]]]]": "🦄💥",
      },
    },
  ],
  "@typescript-eslint/class-literal-property-style": ["error", "getters"],
  "@typescript-eslint/consistent-generic-constructors": [
    "error",
    "constructor",
  ],
  "@typescript-eslint/consistent-indexed-object-style": "error",
  "brace-style": "off",
  "@typescript-eslint/brace-style": [
    "error",
    "1tbs",
    {
      allowSingleLine: false,
    },
  ],
  "comma-dangle": "off",
  "@typescript-eslint/comma-dangle": ["error", "always-multiline"],
  "comma-spacing": "off",
  "@typescript-eslint/comma-spacing": [
    "error",
    {
      before: false,
      after: true,
    },
  ],
  "default-param-last": "off",
  "@typescript-eslint/default-param-last": "error",
  "dot-notation": "off",
  "@typescript-eslint/dot-notation": "error",
  "@typescript-eslint/consistent-type-assertions": [
    "error",
    {
      assertionStyle: "as",
      objectLiteralTypeAssertions: "allow-as-parameter",
    },
  ],
  "@typescript-eslint/consistent-type-definitions": ["error", "type"],
  "@typescript-eslint/consistent-type-exports": [
    "error",
    {
      fixMixedExportsWithInlineTypeSpecifier: true,
    },
  ],
  "@typescript-eslint/consistent-type-imports": [
    "error",
    {
      fixStyle: "inline-type-imports",
    },
  ],
  "func-call-spacing": "off",
  "@typescript-eslint/func-call-spacing": ["error", "never"],
  indent: "off",
  "@typescript-eslint/indent": [
    "error",
    "tab",
    {
      SwitchCase: 1,
      flatTernaryExpressions: false,
      offsetTernaryExpressions: false,
      ignoreComments: false,
    },
  ],
  "keyword-spacing": "off",
  "@typescript-eslint/keyword-spacing": "error",
  "lines-between-class-members": "off",
  "@typescript-eslint/lines-between-class-members": [
    "error",
    "always",
    {
      exceptAfterSingleLine: true,
    },
  ],
  "@typescript-eslint/member-delimiter-style": [
    "error",
    {
      multiline: {
        delimiter: "semi",
        requireLast: true,
      },
      singleline: {
        delimiter: "semi",
        requireLast: false,
      },
    },
  ],
  "@typescript-eslint/member-ordering": [
    "error",
    {
      default: [
        "signature",
        "public-static-field",
        "public-static-method",
        "protected-static-field",
        "protected-static-method",
        "private-static-field",
        "private-static-method",
        "static-field",
        "static-method",
        "public-decorated-field",
        "public-instance-field",
        "public-abstract-field",
        "public-field",
        "protected-decorated-field",
        "protected-instance-field",
        "protected-abstract-field",
        "protected-field",
        "private-decorated-field",
        "private-instance-field",
        "private-field",
        "instance-field",
        "abstract-field",
        "decorated-field",
        "field",
        "public-constructor",
        "protected-constructor",
        "private-constructor",
        "constructor",
        "public-decorated-method",
        "public-instance-method",
        "public-abstract-method",
        "public-method",
        "protected-decorated-method",
        "protected-instance-method",
        "protected-abstract-method",
        "protected-method",
        "private-decorated-method",
        "private-instance-method",
        "private-method",
        "instance-method",
        "abstract-method",
        "decorated-method",
        "method",
      ],
    },
  ],
  camelcase: "off",
  "@typescript-eslint/naming-convention": [
    "error",
    {
      selector: [
        "variable",
        "function",
        "classProperty",
        "objectLiteralProperty",
        "parameterProperty",
        "classMethod",
        "objectLiteralMethod",
        "typeMethod",
        "accessor",
      ],
      format: ["strictCamelCase"],
      leadingUnderscore: "allowSingleOrDouble",
      trailingUnderscore: "allow",
      filter: {
        regex: "[- ]",
        match: false,
      },
    },
    {
      selector: "typeLike",
      format: ["StrictPascalCase"],
    },
    {
      selector: "variable",
      types: ["boolean"],
      format: ["StrictPascalCase"],
      prefix: ["is", "has", "can", "should", "will", "did"],
    },
    {
      selector: "interface",
      filter: "^(?!I)[A-Z]",
      format: ["StrictPascalCase"],
    },
    {
      selector: "typeParameter",
      filter: "^T$|^[A-Z][a-zA-Z]+$",
      format: ["StrictPascalCase"],
    },
    {
      selector: ["classProperty", "objectLiteralProperty"],
      format: null,
      modifiers: ["requiresQuotes"],
    },
  ],
  "@typescript-eslint/no-base-to-string": "error",
  "no-array-constructor": "off",
  "@typescript-eslint/no-array-constructor": "error",
  "no-dupe-class-members": "off",
  "@typescript-eslint/no-dupe-class-members": "error",
  "@typescript-eslint/no-confusing-void-expression": "error",
  "@typescript-eslint/no-duplicate-enum-values": "error",
  "@typescript-eslint/no-dynamic-delete": "error",
  "no-empty-function": "off",
  "@typescript-eslint/no-empty-function": "error",
  "@typescript-eslint/no-empty-interface": [
    "error",
    {
      allowSingleExtends: true,
    },
  ],
  "@typescript-eslint/no-extra-non-null-assertion": "error",
  "no-extra-parens": "off",
  "no-extra-semi": "off",
  "@typescript-eslint/no-extra-semi": "error",
  "no-loop-func": "off",
  "@typescript-eslint/no-loop-func": "error",
  "no-loss-of-precision": "off",
  "@typescript-eslint/no-loss-of-precision": "error",
  "@typescript-eslint/no-extraneous-class": [
    "error",
    {
      allowConstructorOnly: false,
      allowEmpty: false,
      allowStaticOnly: false,
      allowWithDecorator: true,
    },
  ],
  "no-void": [
    "error",
    {
      allowAsStatement: true,
    },
  ],
  "@typescript-eslint/no-floating-promises": [
    "error",
    {
      ignoreVoid: true,
      ignoreIIFE: true,
    },
  ],
  "@typescript-eslint/no-for-in-array": "error",
  "@typescript-eslint/no-inferrable-types": "error",
  "@typescript-eslint/no-meaningless-void-operator": "error",
  "@typescript-eslint/no-misused-new": "error",
  "@typescript-eslint/no-misused-promises": [
    "error",
    {
      checksConditionals: true,
      checksVoidReturn: false,
    },
  ],
  "@typescript-eslint/no-namespace": "error",
  "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
  "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
  "no-redeclare": "off",
  "@typescript-eslint/no-redeclare": "error",
  "no-restricted-imports": "off",
  "@typescript-eslint/no-restricted-imports": [
    "error",
    [
      "error",
      "domain",
      "freelist",
      "smalloc",
      "punycode",
      "sys",
      "querystring",
      "colors",
    ],
  ],
  "@typescript-eslint/no-redundant-type-constituents": "error",
  "@typescript-eslint/no-require-imports": "error",
  "@typescript-eslint/no-this-alias": [
    "error",
    {
      allowDestructuring: true,
    },
  ],
  "no-throw-literal": "off",
  "@typescript-eslint/no-throw-literal": [
    "error",
    {
      allowThrowingUnknown: true,
      allowThrowingAny: false,
    },
  ],
  "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
  "no-constant-condition": "error",
  "@typescript-eslint/no-unnecessary-qualifier": "error",
  "@typescript-eslint/no-unnecessary-type-arguments": "error",
  "@typescript-eslint/no-unnecessary-type-assertion": "error",
  "@typescript-eslint/no-unnecessary-type-constraint": "error",
  "@typescript-eslint/no-unsafe-assignment": "error",
  "@typescript-eslint/no-unsafe-call": "error",
  "@typescript-eslint/no-unsafe-declaration-merging": "error",
  "@typescript-eslint/no-unsafe-return": "error",
  "@typescript-eslint/no-useless-empty-export": "error",
  "no-unused-expressions": "off",
  "@typescript-eslint/no-unused-expressions": "error",
  "no-unused-vars": "off",
  "no-useless-constructor": "off",
  "@typescript-eslint/no-useless-constructor": "error",
  "object-curly-spacing": "off",
  "@typescript-eslint/object-curly-spacing": ["error", "never"],
  "padding-line-between-statements": "off",
  "@typescript-eslint/padding-line-between-statements": [
    "error",
    {
      blankLine: "always",
      prev: "multiline-block-like",
      next: "*",
    },
  ],
  "@typescript-eslint/no-var-requires": "error",
  "@typescript-eslint/non-nullable-type-assertion-style": "error",
  "@typescript-eslint/parameter-properties": [
    "error",
    {
      prefer: "parameter-property",
    },
  ],
  "@typescript-eslint/prefer-as-const": "error",
  "@typescript-eslint/prefer-for-of": "error",
  "@typescript-eslint/prefer-function-type": "error",
  "@typescript-eslint/prefer-includes": "error",
  "@typescript-eslint/prefer-literal-enum-member": "error",
  "@typescript-eslint/prefer-namespace-keyword": "error",
  "@typescript-eslint/prefer-nullish-coalescing": [
    "error",
    {
      ignoreTernaryTests: false,
      ignoreConditionalTests: false,
      ignoreMixedLogicalExpressions: false,
    },
  ],
  "@typescript-eslint/prefer-optional-chain": "error",
  "@typescript-eslint/prefer-readonly": "error",
  "@typescript-eslint/prefer-reduce-type-parameter": "error",
  "@typescript-eslint/prefer-string-starts-ends-with": "error",
  "@typescript-eslint/prefer-ts-expect-error": "error",
  "@typescript-eslint/promise-function-async": "error",
  quotes: "off",
  "@typescript-eslint/quotes": ["error", "single"],
  "@typescript-eslint/restrict-plus-operands": [
    "error",
    {
      checkCompoundAssignments: true,
      allowAny: false,
    },
  ],
  "@typescript-eslint/restrict-template-expressions": [
    "error",
    {
      allowNumber: true,
    },
  ],
  "@typescript-eslint/return-await": "error",
  "@typescript-eslint/require-array-sort-compare": [
    "error",
    {
      ignoreStringArrays: true,
    },
  ],
  "space-before-function-paren": "off",
  "@typescript-eslint/space-before-function-paren": [
    "error",
    {
      anonymous: "always",
      named: "never",
      asyncArrow: "always",
    },
  ],
  "space-infix-ops": "off",
  "@typescript-eslint/space-infix-ops": "error",
  semi: "off",
  "@typescript-eslint/semi": ["error", "always"],
  "space-before-blocks": "off",
  "@typescript-eslint/space-before-blocks": ["error", "always"],
  "@typescript-eslint/switch-exhaustiveness-check": "error",
  "@typescript-eslint/triple-slash-reference": [
    "error",
    {
      path: "never",
      types: "never",
      lib: "never",
    },
  ],
  "@typescript-eslint/type-annotation-spacing": "error",
  "@typescript-eslint/prefer-regexp-exec": "error",
  "@typescript-eslint/prefer-return-this-type": "error",
  "@typescript-eslint/unified-signatures": [
    "error",
    {
      ignoreDifferentlyNamedParameters: true,
    },
  ],
  "no-undef": "off",
  "node/no-unsupported-features/es-syntax": "off",
  "node/no-unsupported-features/es-builtins": "off",
  "unicorn/no-null": "off",
  "import/namespace": "off",
  "no-duplicate-imports": "off",
  "@typescript-eslint/no-unused-vars": "off",
  "@typescript-eslint/no-unsafe-call": "off",
  "@typescript-eslint/no-confusing-void-expression": "off",
  "@typescript-eslint/naming-convention": [
    "error",
    {
      selector: [
        "variable",
        "function",
        "classProperty",
        "objectLiteralProperty",
        "parameterProperty",
        "classMethod",
        "objectLiteralMethod",
        "typeMethod",
        "accessor",
      ],
      format: ["strictCamelCase", "StrictPascalCase"],
      leadingUnderscore: "allowSingleOrDouble",
      trailingUnderscore: "allow",
      filter: {
        regex: "[- ]",
        match: false,
      },
    },
    {
      selector: "typeLike",
      format: ["StrictPascalCase"],
    },
    {
      selector: "variable",
      types: ["boolean"],
      format: ["StrictPascalCase"],
      prefix: ["is", "has", "can", "should", "will", "did"],
    },
    {
      selector: "interface",
      filter: "^(?!I)[A-Z]",
      format: ["StrictPascalCase"],
    },
    {
      selector: "typeParameter",
      filter: "^T$|^[A-Z][a-zA-Z]+$",
      format: ["StrictPascalCase"],
    },
    {
      selector: ["classProperty", "objectLiteralProperty"],
      format: null,
      modifiers: ["requiresQuotes"],
    },
  ],
};
const b = Object.keys(a).sort();
const e = b.reduce(
  (acc, cur) => ({
    ...acc,
    [cur]: a[cur],
  }),
  {}
);

fs.writeFile("./a.json", JSON.stringify(e, null, 2), (err) => {
  if (err) console.log(err);
});

/// https://jsoncompare.org/
